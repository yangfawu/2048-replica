{"version":3,"sources":["webpack://2048/./src/js/Tile.ts","webpack://2048/./src/js/Board.ts","webpack://2048/./src/js/Input.ts","webpack://2048/./src/js/index.ts","webpack://2048/webpack/bootstrap","webpack://2048/webpack/runtime/compat get default export","webpack://2048/webpack/runtime/define property getters","webpack://2048/webpack/runtime/hasOwnProperty shorthand","webpack://2048/webpack/runtime/jsonp chunk loading","webpack://2048/webpack/startup"],"names":["Tile","row","col","power","this","_power","before","now","timeString","ANIMATION_TIME","node","addClass","attr","css","join","_compile","other","value","padding","spacing","size","origin","form","idx","text","top","left","setTimeout","newRow","newCol","changeCoord","remove","Board","tiles","Array","state","scoreNode","score","$back","i","append","$front","resetFunc","reset","over","button","on","$over","Object","values","fadeOut","html","target","ref","amount","setScore","_normalizeScores","length","empty","options","emptyTileIndexes","index","Math","floor","random","tile","freq","addTileRandomly","chanceOf4","out","j","rows","cols","group","equals","_isGroupCollapsable","push","collapsableRows","collapsableCols","isRowsCollapsable","isColsCollapsable","_sortedFlatIndexes","open","findIndex","isFull","isCollapsable","ascending","newGroups","_generateEmptyMap","currGroups","map","filter","fillIndex","current","adjacentIdx","adjacent","upgrade","addScore","splice","pop","shift","oldPrint","flatPrint","_collapse","addRandomTile","isUnbeatable","isCompleted","fadeIn","src","move","Promise","resolve","reject","collapse","DELAY","Input","board","listening","keydown","swipe","listenForKeyDown","listenForSwipe","window","ev","preventDefault","code","trigger","then","res","DEBUG","console","log","catch","reason","touchStarted","original","htmlNode","touches","touch","clientX","clientY","changedTouches","_analyzeTouch","width","sqrt","TOUCH_DIST_THRESHOLD","angle","atan2","PI","input","document","body","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call","m","n","getter","__esModule","d","a","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","installedChunks","179","deferredModules","checkDeferredModules","checkDeferredModulesImpl","result","deferredModule","fulfilled","depId","s","x","chunkLoadingGlobal","slice","webpackJsonpCallback","data","chunkId","chunkIds","moreModules","runtime","executeModules","resolves","parentChunkLoadingFunction","apply","self","bind"],"mappings":"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","file":"index.js","sourcesContent":["import { BoardIndex } from \"./Board\";\r\nimport $ from \"jquery\";\r\n\r\nexport class Tile {\r\n\r\n    static ANIMATION_TIME = 0.1;\r\n\r\n    _power: number;\r\n    before: [BoardIndex, BoardIndex]; // [row, col]\r\n    now: [BoardIndex, BoardIndex]; // [row, col]\r\n    node: JQuery<HTMLElement>;\r\n\r\n    /**\r\n     * constructs a Tile instance that represents valuable tile in 2048\r\n     * @param power a non-negative integer representing an exponent of 2\r\n     */\r\n    constructor(row: BoardIndex, col: BoardIndex, power = 1) {\r\n        this._power = power;\r\n        this.before = [ row, col ];\r\n        this.now = [ row, col ];\r\n\r\n        const timeString = `${Tile.ANIMATION_TIME}s`;\r\n        this.node = $(`<div>`).addClass(\"tile\")\r\n                            .attr(\"data-value\", 0)\r\n                            .css(\"transition\", [\"top\", \"left\", \"transform\"].join(` ${timeString}, `) + ` ${timeString}`);\r\n        this._compile();\r\n    }\r\n\r\n    /**\r\n     * @returns a non-negative integer representing an exponent of 2\r\n     */\r\n    get power(): number {\r\n        return this._power;\r\n    }\r\n\r\n    /**\r\n     * @returns a power of two that the tile is currently representing\r\n     */\r\n    get value(): number {\r\n        return 2**this._power;\r\n    }\r\n\r\n    /**\r\n     * @param other another instance of Tile\r\n     * @returns whether or not this tile and the other tile has the same value\r\n     */\r\n    equals(other: Tile | null): boolean {\r\n        return this.value == other?.value;\r\n    }\r\n\r\n    static get spacing(): string {\r\n        return \"15px\";\r\n    }\r\n\r\n    /**\r\n     * (re)compiles the Tile instance's HTML represenation\r\n     * @returns a reference to this Tile instance for chaining\r\n     */\r\n    _compile(): Tile {\r\n        const padding = Tile.spacing;\r\n        const size = `calc(25% - calc(0.75 * ${padding}))`;\r\n        const origin = `calc(${size} / 2)`;\r\n        const form = (idx: 0 | 1) => `calc(${origin} + ${this.now[idx]}*${size} + ${this.now[idx]}*${padding})`;\r\n        this.node.text(this.value)\r\n            .attr(\"data-value\", this.value)\r\n            .css({\r\n                top: form(0),\r\n                left: form(1)\r\n            });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * increases the tile's power and automatically recompiles its HTML representation\r\n     * @returns a reference to this Tile instance for chaining\r\n     */\r\n    upgrade(): Tile {\r\n        this._power++;\r\n        this._compile();\r\n        this.node.css(\"transform\", \"translate(-50%, -50%) scale(1.2)\");\r\n        setTimeout(() => {\r\n            this.node.css(\"transform\", \"translate(-50%, -50%) scale(1)\");\r\n        }, Tile.ANIMATION_TIME * 1000);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * sets the new coordinates of the tile\r\n     * @param newRow the new row index where this tile will be placed\r\n     * @param newCol the new column index where this tile will be placed\r\n     * @returns a reference to this Tile instance for chaining\r\n     */\r\n    changeCoord(newRow: BoardIndex, newCol: BoardIndex): Tile {\r\n        this.before = [...this.now];\r\n        this.now = [newRow, newCol];\r\n        return this._compile();\r\n    }\r\n\r\n    /**\r\n     * sets the new column index of the tile\r\n     * @param newCol the new column index where this tile will be placed\r\n     * @returns a reference to this Tile instance for chaining\r\n     */\r\n    changeCol(newCol: BoardIndex): Tile {\r\n        return this.changeCoord(this.now[0], newCol);\r\n    }\r\n    \r\n    /**\r\n     * sets the new row index of the tile\r\n     * @param newRow the new row index where this tile will be placed\r\n     * @returns a reference to this Tile instance for chaining\r\n     */\r\n    changeRow(newRow: BoardIndex): Tile {\r\n        return this.changeCoord(newRow, this.now[1]);\r\n    }\r\n\r\n    /**\r\n     * removes its HTML representation from the DOM if it's added\r\n     * @returns a reference to this Tile instance for chaining\r\n     */\r\n    remove(): Tile {\r\n        this.node.remove();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @returns the flat index of its old coordinates\r\n     */\r\n    get flatBeforeIndex(): number {\r\n        return this.before[0]*4 + this.before[1];\r\n    }\r\n\r\n    /**\r\n     * @returns the flat index of its current coordinates\r\n     */\r\n    get flatNowIndex(): number {\r\n        return this.now[0]*4 + this.now[1];\r\n    }\r\n\r\n}","import { Tile } from \"./Tile\";\r\nimport $ from \"jquery\";\r\nexport type BoardIndex = 0 | 1 | 2 | 3;\r\nexport class Board {\r\n\r\n    static DELAY = 0; // ms\r\n    static ANIMATION_TIME = 1000*Tile.ANIMATION_TIME + Board.DELAY; // ms\r\n\r\n    tiles: (Tile | null)[];\r\n    state: \"IDLE\" | \"BUSY\";\r\n    $front: JQuery;\r\n    over: {\r\n        text: JQuery,\r\n        button: JQuery\r\n    };\r\n    $over: JQuery;\r\n    node: JQuery;\r\n    score: [{ node: JQuery, value: number }, { node: JQuery, value: number }];\r\n\r\n    /**\r\n     * constructs a new instance of Board that have empty tiles\r\n     */\r\n    constructor() {\r\n        this.tiles = new Array<Tile | null>(16);\r\n        this.state = \"IDLE\";\r\n\r\n        const scoreNode = () => ({ \r\n            node: $(`<span>`)\r\n                .css(\"transition\", `transform ${Tile.ANIMATION_TIME}s, color ${Tile.ANIMATION_TIME}s`)\r\n                .text(0), \r\n            value: 0 });\r\n        this.score = [scoreNode(), scoreNode()];\r\n        \r\n        const $back = $(`<div class=\"back\">`);\r\n        for (let i=0; i<16; i++)\r\n            $back.append(`<div>`);\r\n        this.$front = $(`<div class=\"front\">`);\r\n\r\n        const resetFunc = () => {\r\n            this.reset();\r\n        };\r\n        this.over = {\r\n            text: $(\"<p>\").text(\"Game over!\"),\r\n            button: $(\"<button>\").text(\"Try again\").on(\"click\", resetFunc)\r\n        }\r\n        this.$over = $(`<div class=\"over\">`).append(\r\n            ...Object.values(this.over)\r\n        ).fadeOut(0);\r\n        this.node = $(`<section class=\"ui\">`).append(\r\n            $(`<div class=\"header\">`).append(\r\n                $(\"<div>\").append(\r\n                    $(\"<h1>\").text(\"2048\"),\r\n                    $(\"<p>\").html(`Join the tiles, get to <a href=\"https://play2048.co/\" target=\"_blank\">2048!</a>`),\r\n                    $(\"<p>\").text(\"Replicated from scratch by Yangfa\")\r\n                ),\r\n                $(\"<div>\").append(\r\n                    $(\"<div>\").append(\r\n                        $(\"<div>\").append(\r\n                            $(\"<h1>\").text(\"score\"),\r\n                            this.score[0].node\r\n                        ),\r\n                        $(\"<div>\").append(\r\n                            $(\"<h1>\").text(\"best\"),\r\n                            this.score[1].node\r\n                        )\r\n                    ),\r\n                    $(\"<button>\").text(\"New Game\").on(\"click\", resetFunc)\r\n                )\r\n            ),\r\n            $(`<div class=\"board\">`).append(\r\n                $back,\r\n                this.$front,\r\n                this.$over\r\n            ),\r\n            $(\"<p>\").html(`All the colors and general formatting were sourced from <a href=\"https://play2048.co/\" target=\"_blank\">here</a>. Everything else in this project is built from scratch using node_modules, TS, and SCSS. Have fun.`)\r\n        );\r\n\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * sets the current score or high score to specified score\r\n     * @param target an index indicating if you are editting high score or current score\r\n     * @param score the new score the target will have\r\n     * @returns a reference to the Board instance\r\n     */\r\n    setScore(target: 0 | 1, score: number): Board {\r\n        const ref = this.score[target];\r\n        if (ref.value != score) {\r\n            ref.value = score;\r\n            ref.node.text(ref.value).css({\r\n                \"transform\": \"scale(1.2)\",\r\n                \"color\": \"#dddddd\"\r\n            });\r\n            setTimeout(() => {\r\n                ref.node.css({\r\n                    \"transform\": \"scale(1)\",\r\n                    \"color\": \"white\"\r\n                });\r\n            }, Board.ANIMATION_TIME);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * adds a specified amount of points to the current score\r\n     * @param amount the amount of points to add to current score\r\n     * @returns a reference to the Board instance\r\n     */\r\n    addScore(amount: number): Board {\r\n        this.setScore(0, this.score[0].value + amount);\r\n        return this._normalizeScores();\r\n    }\r\n\r\n    /**\r\n     * makes sure that the high score is up to date with current score\r\n     * @returns a reference to the Board instance\r\n     */\r\n    _normalizeScores(): Board {\r\n        if (this.score[0].value > this.score[1].value)\r\n            this.setScore(1, this.score[0].value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * removes all numbered-tiles from the board\r\n     */\r\n    empty(): Board {\r\n        for (let i=0; i<this.tiles.length; i++)\r\n            this.tiles[i] = null;\r\n        this.$front.empty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * adds a tile with desired power into the board if possible\r\n     * @param power the power of the new tile\r\n     */\r\n    addTileRandomly(power = 1): Board {\r\n        const options: number[] = this.emptyTileIndexes;\r\n        if (options.length > 0) {\r\n            const index = options[Math.floor(Math.random() * options.length)];\r\n            const row: BoardIndex = Math.floor(index / 4) as BoardIndex;\r\n            const col: BoardIndex = (index % 4) as BoardIndex;\r\n            const tile: Tile = new Tile(row, col, power);\r\n            this.$front.append(tile.node);\r\n            this.tiles[index] = tile;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    static chanceOf4 = 0.7;\r\n\r\n    /**\r\n     * adds a new tile with a power of 1 or 2 to an empty slot on the board randomly\r\n     * @param freq the number of random tiles to add\r\n     * @returns a reference of the Board instance for chaining\r\n     */\r\n    addRandomTile(freq = 1): Board {\r\n        for (let i=0; i<freq; i++)\r\n            this.addTileRandomly(Math.random() > Board.chanceOf4 ? 2 : 1);\r\n        return this; \r\n    }\r\n\r\n    /**\r\n     * @returns the board tiles in an array of rows from top to bottom\r\n     */\r\n    get rows(): (Tile | null)[][] {\r\n        const out: (Tile | null)[][] = new Array<(Tile | null)[]>(4);\r\n        for (let i=0; i<out.length; i++) {\r\n            const row: (Tile | null)[] = new Array<Tile | null>(4);\r\n            for (let j=0; j<4; j++)\r\n                row[j] = this.tiles[i*4 + j];\r\n            out[i] = row;\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @returns the board tiles in an array of columns from left to right\r\n     */\r\n    get cols(): (Tile | null)[][] {\r\n        const out: (Tile | null)[][] = new Array<(Tile | null)[]>(4);\r\n        for (let i=0; i<out.length; i++) {\r\n            const col: (Tile | null)[] = new Array<Tile | null>(4);\r\n            for (let j=0; j<4; j++)\r\n                col[j] = this.tiles[j*4 + i];\r\n            out[i] = col;\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @param index the index corresponding to the specific row you want to get\r\n     * @returns the row corresponding to the given index\r\n     */\r\n    getRow(index: BoardIndex): (Tile | null)[] {\r\n        return this.rows[index];\r\n    }\r\n\r\n    /**\r\n     * @param index the index corresponding to the specific column you want to get\r\n     * @returns the column corresponding to the given index\r\n     */\r\n    getCol(index: BoardIndex): (Tile | null)[] {\r\n        return this.cols[index];\r\n    }\r\n\r\n    /**\r\n     * @param index the index corresponding to the tile you want to get (order: left to right, top to bottom)\r\n     * @returns the corresponding tile at given index\r\n     */\r\n    getTileFlatly(index: number): (Tile | null) {\r\n        if (index < 0 || index >= this.tiles.length) return null;\r\n        return this.tiles[index];  \r\n    }\r\n\r\n    /**\r\n     * @param row the row index corresponding to the specific row you want to access (order: top to bottom)\r\n     * @param col the column index corresponding to the specific column you want to access (order: left to right)\r\n     * @returns the corresponding tile at given coordinates\r\n     */\r\n    getTile(row: BoardIndex, col: BoardIndex): (Tile | null) {\r\n        return this.tiles[row*4 + col];\r\n    }\r\n\r\n    /**\r\n     * @param group a collection of tiles\r\n     * @returns whether or not there is any consecutive tile with the same values within the same group (nulls don't count)\r\n     */\r\n    _isGroupCollapsable(group: (Tile | null)[]): boolean {\r\n        for (let i=1; i<group.length; i++)\r\n            if (group[i]?.equals(group[i - 1]))\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @returns an array of all the indexes corresponding to rows that can be collapsed\r\n     */\r\n    get collapsableRows(): BoardIndex[] {\r\n        const out: BoardIndex[] = [];\r\n        for (let i=0; i<this.rows.length; i++) {\r\n            const row = this.rows[i];\r\n            if (this._isGroupCollapsable(row))\r\n                out.push(i as BoardIndex);\r\n        }\r\n        return out;            \r\n    }\r\n\r\n    /**\r\n     * @returns an array of all the indexes corresponding to columns that can be collpased\r\n     */\r\n    get collapsableCols(): BoardIndex[] {\r\n        const out: BoardIndex[] = [];\r\n        for (let i=0; i<this.cols.length; i++) {\r\n            const col = this.cols[i];\r\n            if (this._isGroupCollapsable(col))\r\n                out.push(i as BoardIndex);\r\n        }\r\n        return out;  \r\n    }\r\n\r\n    /**\r\n     * @returns whether or not any of the rows can be collapsed\r\n     */\r\n    get isRowsCollapsable(): boolean {\r\n        return this.collapsableRows.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not any of the columns can be collapsed\r\n     */\r\n    get isColsCollapsable(): boolean {\r\n        return this.collapsableCols.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not anything can be collapsed\r\n     */\r\n    get isCollapsable(): boolean {\r\n        return this.isRowsCollapsable || this.isColsCollapsable;\r\n    }\r\n\r\n    /**\r\n     * @returns a 2D array where the first array contains all the tile indexes of filled in tiles and the second array contains all the other indexes\r\n     */\r\n    get _sortedFlatIndexes(): number[][] {\r\n        const out: number[][] = [[], []];\r\n        for (let i=0; i<this.tiles.length; i++)\r\n            out[this.tiles[i] ? 0 : 1].push(i); \r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @returns an array of all the tile indexes of filled tiles\r\n     */\r\n    get filledTileIndexes(): number[] {\r\n        return this._sortedFlatIndexes[0];\r\n    }\r\n\r\n    /**\r\n     * @returns an array of all the tile indexes of empty tiles\r\n     */\r\n    get emptyTileIndexes(): number[] {\r\n        return this._sortedFlatIndexes[1];\r\n    }\r\n\r\n    /**\r\n     * @returns a random index of a board tile that does not have a tile already\r\n     */\r\n    get randomOpenIndex(): number {\r\n        const open: number[] = this.emptyTileIndexes;\r\n        if (open.length < 1) return -1;\r\n        return open[Math.floor(Math.random()*open.length)];\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not there is a tile with a value of 2048\r\n     */\r\n    get isCompleted(): boolean {\r\n        return this.tiles.findIndex(tile => tile && tile.value >= 2048) > -1;\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not more tiles can be added\r\n     */\r\n    get isFull(): boolean {\r\n        return this.emptyTileIndexes.length == 0;\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not the board has reached a dead end\r\n     */\r\n    get isUnbeatable(): boolean {\r\n        return this.isFull && !this.isCollapsable;\r\n    }\r\n\r\n    /**\r\n     * @returns a clean 4x4 board with no numbered-tiles\r\n     */\r\n    static _generateEmptyMap(): (Tile | null)[][] {\r\n        const out: (Tile | null)[][] = new Array<(Tile | null)[]>(4);\r\n        for (let i=0; i<4; i++) {\r\n            const row: (Tile | null)[] = [];\r\n            for (let j=0; j<4; j++)\r\n                row[j] = null;\r\n            out[i] = row;\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * collapses all the rows/cols of the board in the given directon\r\n     * @param target a string specifying which dimension to squash\r\n     * @param ascending whether or not the algorithm should squash left-to-right/top-to-bottom or the opposite\r\n     * @returns a reference to the Board instance for chaining\r\n     */\r\n    _collapse(target: \"rows\" | \"cols\", ascending = true): Board {\r\n        const newGroups: (Tile | null)[][] = Board._generateEmptyMap();\r\n        const currGroups: Tile[][] = [...this[target]].map(group => group.filter(tile => tile != null)) as Tile[][];\r\n        for (let i=0; i<currGroups.length; i++) {\r\n            const group: Tile[] = currGroups[i];\r\n            let fillIndex = ascending ? 3 : 0;\r\n            while (group.length > 0) {\r\n                const currentIdx = ascending ? group.length - 1 : 0 ;\r\n                const current: Tile = group[currentIdx];\r\n                if (group.length > 1) {\r\n                    const adjacentIdx = ascending ? group.length - 2 : 1;\r\n                    const adjacent: Tile = group[adjacentIdx];\r\n                    if (current.equals(adjacent)) {\r\n                        current.upgrade();\r\n                        this.addScore(current.value);\r\n                        adjacent.remove();\r\n                        group.splice(adjacentIdx, 1);\r\n                    }\r\n                }\r\n                newGroups[i][fillIndex] = current;\r\n                if (ascending) {\r\n                    fillIndex--;\r\n                    group.pop();\r\n                } else {\r\n                    fillIndex++;\r\n                    group.shift();\r\n                }\r\n            }\r\n        }\r\n        for (let i=0; i<this.tiles.length; i++) {\r\n            const row: BoardIndex = Math.floor(i / 4) as BoardIndex;\r\n            const col: BoardIndex = (i % 4) as BoardIndex;\r\n            const tile: Tile | null = target == \"rows\" ? newGroups[row][col] : newGroups[col][row];\r\n            this.tiles[i] = tile ? tile.changeCoord(row, col) : null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * collapses all the rows of the board in the given directon\r\n     * @param target a string specifying which dimension to squash\r\n     * @param ascending whether or not the algorithm should squash left-to-right/top-to-bottom or the opposite\r\n     * @returns a reference to the Board instance for chaining\r\n     */\r\n    collapse(target: \"rows\" | \"cols\", ascending = true): Board {\r\n        const oldPrint: string = this.flatPrint;\r\n        this._collapse(target, ascending);\r\n        const newPrint: string = this.flatPrint;\r\n        if (newPrint != oldPrint && !this.isFull) {\r\n            this.addRandomTile();\r\n            if (this.isUnbeatable || this.isCompleted) {\r\n                this.over.text.text(\"Game over!\");\r\n                this.over.button.text(\"Try again\");\r\n                if (this.isCompleted) {\r\n                    this.over.text.text(\"You win!\");\r\n                    this.over.button.text(\"Replay\");\r\n                }\r\n                this.$over.fadeIn(500);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @returns a flat map of all the tiles in the Board instance\r\n     */\r\n    get flatMap(): (Tile | null)[] {\r\n        return this.tiles;\r\n    }\r\n\r\n    /**\r\n     * @returns an immutable snap of what all the tile's values are\r\n     */\r\n    get flatPrint(): string {\r\n        const src: (null | number)[] = [];\r\n        for (let i=0; i<this.tiles.length; i++) {\r\n            const tile: (null | Tile) = this.tiles[i];\r\n            src.push(tile ? tile.value : null);\r\n        }\r\n        return src.join(\"-\");\r\n    }\r\n\r\n    /**\r\n     * collapses the board with the given direction\r\n     * @param move the direction indicating how the board should be collapsed\r\n     */\r\n    shift(move: \"LEFT\" | \"RIGHT\" | \"UP\" | \"DOWN\"): Promise<string> {\r\n        if (this.state == \"BUSY\")\r\n            return new Promise<string>((resolve, reject) => {\r\n                reject(\"The board is currently busy executing another move.\")\r\n            });\r\n        if (this.isUnbeatable || this.isCompleted)\r\n            return new Promise<string>((resolve, reject) => {\r\n                this.over.text.text(\"Game over!\");\r\n                this.over.button.text(\"Try again\");\r\n                if (this.isCompleted) {\r\n                    this.over.text.text(\"You win!\");\r\n                    this.over.button.text(\"Replay\");\r\n                }\r\n                this.$over.fadeIn(500);\r\n                reject(\"The game is over.\");\r\n            });\r\n        this.state = \"BUSY\";\r\n        return new Promise<string>((resolve) => {\r\n            if (move == \"RIGHT\" || move == \"LEFT\")\r\n                this.collapse(\"rows\", move == \"RIGHT\");\r\n            else\r\n                this.collapse(\"cols\", move == \"DOWN\");\r\n            setTimeout(() => {\r\n                this.state = \"IDLE\";\r\n                resolve( move + \" move executed.\");\r\n            }, Board.ANIMATION_TIME);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * resets the board so a new game can be played\r\n     */\r\n    reset(): Board {\r\n        this._normalizeScores()\r\n            .setScore(0, 0)\r\n            .empty()\r\n            .$over.fadeOut(500, () => {\r\n                this.addRandomTile(2);\r\n            });\r\n        return this;\r\n    }\r\n\r\n}","import { Board } from \"./Board\";\r\nimport $ from \"jquery\";\r\nexport class Input {\r\n\r\n    static DEBUG = false;\r\n\r\n    board: Board;\r\n    listening: {\r\n        keydown: boolean,\r\n        swipe: boolean\r\n    }\r\n\r\n    /**\r\n     * constructs Input instance that listens for key changes or swipes and sends them to a board\r\n     * @param board the board instance to send signals to\r\n     */\r\n    constructor(board: Board) {\r\n        this.board = board;   \r\n        this.listening = {\r\n            keydown: false,\r\n            swipe: false\r\n        };\r\n        this.listenForKeyDown();\r\n        this.listenForSwipe();\r\n    }\r\n\r\n    /**\r\n     * a one time function that begins the listening for keydown events\r\n     * @returns a reference to the Input instance\r\n     */\r\n    listenForKeyDown(): Input {\r\n        if (this.listening.keydown) return this;\r\n        this.listening.keydown = true;\r\n        $(window).on(\"keydown\", ev => {\r\n            ev.preventDefault();\r\n            \r\n            let move: \"LEFT\" | \"DOWN\" | \"RIGHT\" | \"UP\" | null = null;\r\n            switch (ev.code) {\r\n                case \"KeyA\":\r\n                case \"ArrowLeft\":\r\n                    move = \"LEFT\";\r\n                    break;\r\n                case \"KeyS\":\r\n                case \"ArrowDown\":\r\n                    move = \"DOWN\";\r\n                    break;\r\n                case \"KeyD\":\r\n                case \"ArrowRight\":\r\n                    move = \"RIGHT\";\r\n                    break;\r\n                case \"KeyW\":\r\n                case \"ArrowUp\":\r\n                    move = \"UP\";\r\n                    break;\r\n                default: break;\r\n            }\r\n\r\n            if (move)\r\n                this.trigger(move)\r\n                    .then((res: string) => {\r\n                        if (Input.DEBUG)\r\n                            console.log(res);\r\n                    }).catch(reason => {\r\n                        if (Input.DEBUG)\r\n                            console.log(reason);\r\n                    });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * a one time function that begins the listening for swiping events\r\n     * @returns a reference to the Input instance\r\n     */\r\n    listenForSwipe(): Input {\r\n        if (this.listening.swipe) return this;\r\n        this.listening.swipe = true;\r\n\r\n        let touchStarted = false;\r\n        let original: [number, number] = [0, 0];\r\n        const htmlNode: JQuery = this.board.$front;\r\n        htmlNode.on(\"touchstart\", ev => {\r\n            ev.preventDefault();\r\n            if (touchStarted) return;\r\n            if (ev.touches.length < 1) return; \r\n            touchStarted = true;\r\n            \r\n            const touch = ev.touches[0];\r\n            original = [touch.clientX, touch.clientY];\r\n        });\r\n        htmlNode.on(\"touchend\", ev => {\r\n            ev.preventDefault();\r\n            if (!touchStarted) return;\r\n            if (ev.changedTouches.length < 1) return;\r\n            const touch = ev.changedTouches[0];\r\n\r\n            this._analyzeTouch(original, [touch.clientX, touch.clientY]);\r\n\r\n            touchStarted = false;\r\n        });\r\n        htmlNode.on(\"touchcancel\", ev => {\r\n            ev.preventDefault();\r\n            touchStarted = false;\r\n        });\r\n        return this;\r\n    }\r\n\r\n    get TOUCH_DIST_THRESHOLD(): number {\r\n        return (this.board.$front.width() || 400) / 4;\r\n    }\r\n\r\n    /**\r\n     * analyzes the touch event and fires a move if deemed appropiate\r\n     * @param original the XY coordinates where the touch started\r\n     * @param now the XY coordinates where the touch ended\r\n     */\r\n    _analyzeTouch(original: [number, number], now: [number, number]): void {\r\n        const dist: number = Math.sqrt((original[0] - now[0])**2 + (original[1] - now[1])**2);\r\n        if (dist < this.TOUCH_DIST_THRESHOLD) return;\r\n\r\n        now[0]-= original[0];\r\n        now[1]-= original[1];\r\n\r\n        const angle: number = Math.atan2(now[1], now[0]);\r\n        this.trigger(\r\n            angle > 3*Math.PI/4 || angle <= -3*Math.PI/4 ? \"LEFT\" :\r\n            angle <= 3*Math.PI/4 && angle > Math.PI/4 ? \"DOWN\" :\r\n            angle <= Math.PI/4 && angle > -Math.PI/4 ? \"RIGHT\" :\r\n            \"UP\"\r\n        ).then((res: string) => {\r\n            if (Input.DEBUG)\r\n                console.log(res);\r\n        }).catch(reason => {\r\n            if (Input.DEBUG)\r\n                console.log(reason);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * sends a signal to the board instance indicating the user's choice of move\r\n     * @param move the move signal to send to the board\r\n     * @returns a Promise that resolves upon the completetion of the move or rejects when the board is busy\r\n     */\r\n    async trigger(move: \"UP\" | \"DOWN\" | \"LEFT\" | \"RIGHT\"): Promise<string> {\r\n        return this.board.shift(move);\r\n    }\r\n\r\n}","import { Board } from \"./Board\";\r\nimport $ from \"jquery\";\r\nimport { Input } from \"./Input\";\r\n\r\nconst board: Board = new Board();\r\nconst input: Input = new Input(board);\r\n\r\n$(document.body).append(board.node);\r\n\r\nif (Input.DEBUG)\r\n    console.log(input.board);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// Promise = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\nvar deferredModules = [\n\t[540,874]\n];\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\nvar checkDeferredModules = () => {\n\n};\nfunction checkDeferredModulesImpl() {\n\tvar result;\n\tfor(var i = 0; i < deferredModules.length; i++) {\n\t\tvar deferredModule = deferredModules[i];\n\t\tvar fulfilled = true;\n\t\tfor(var j = 1; j < deferredModule.length; j++) {\n\t\t\tvar depId = deferredModule[j];\n\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferredModules.splice(i--, 1);\n\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n\t\t}\n\t}\n\tif(deferredModules.length === 0) {\n\t\t__webpack_require__.x();\n\t\t__webpack_require__.x = () => {\n\n\t\t}\n\t}\n\treturn result;\n}\n__webpack_require__.x = () => {\n\t// reset startup function so it can be called again when more startup code is added\n\t__webpack_require__.x = () => {\n\n\t}\n\tchunkLoadingGlobal = chunkLoadingGlobal.slice();\n\tfor(var i = 0; i < chunkLoadingGlobal.length; i++) webpackJsonpCallback(chunkLoadingGlobal[i]);\n\treturn (checkDeferredModules = checkDeferredModulesImpl)();\n};\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (data) => {\n\tvar [chunkIds, moreModules, runtime, executeModules] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0, resolves = [];\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tresolves.push(installedChunks[chunkId][0]);\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tparentChunkLoadingFunction(data);\n\twhile(resolves.length) {\n\t\tresolves.shift()();\n\t}\n\n\t// add entry modules from loaded chunk to deferred list\n\tif(executeModules) deferredModules.push.apply(deferredModules, executeModules);\n\n\t// run deferred modules when all chunks ready\n\treturn checkDeferredModules();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_2048\"] = self[\"webpackChunk_2048\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = webpackJsonpCallback;","// run startup\nreturn __webpack_require__.x();\n"],"sourceRoot":""}